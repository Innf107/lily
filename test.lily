let ℕ : Type = (a : Type) -> a -> (a -> a) -> a 
in

let Z : ℕ = λa. λz. λs. z
in

let S : ℕ -> ℕ = λn. λa. λz. λs. s (n a z s)
in

let one   : ℕ = S Z     in
let two   : ℕ = S one   in
let three : ℕ = S two   in
let four  : ℕ = S three in
let five  : ℕ = S four  in

let add : ℕ -> ℕ -> ℕ = 
    λn. λm. n ℕ m S
in

let Eq : (k : Type) -> k -> k -> Type =
    λk. λa. λb. (f : k -> Type) -> f a -> f b
in

let Refl : (k : Type) -> (a : k) -> Eq k a a =
    λk. λa. λf. λfa. fa
in

let Symm : (k : Type) -> (a : k) -> (b : k) 
         -> Eq k a b 
         -> Eq k b a =
    λk. λa. λb. λAeB. AeB (λd. Eq k d a) (Refl k a)
in

let Trans : (k : Type) -> (a : k) -> (b : k) -> (c : k)
          -> Eq k a b 
          -> Eq k b c
          -> Eq k a c =
    λk. λa. λb. λc. λAeB. λBeC.
        BeC (Eq k a) AeB
in

let test : Eq ℕ (add two three) five = Refl ℕ five in

let abs0PlusL : (n : ℕ) -> Eq ℕ (add Z n) n =
    λn. Refl ℕ n
in

-- let indℕ : (P : ℕ -> Type) -> P Z -> ((n : ℕ) -> P n -> P (S n)) -> (m : ℕ) -> P m = 
--     λp. λpZ. λpInd. λm. _ 
-- in

-- This needs induction over naturals. No idea how to do that with church naturals.
-- Guess I'll have to add inductive types now, don't I?
-- let abs0PlusR : (n : ℕ) -> Eq ℕ (add n Z) n =
--     λn. n 
--         _ 
--         _ 
-- in

let Either : Type -> Type -> Type = 
    λa. λb. (c : Type) -> (a -> c) -> (b -> c) -> c
in

let injl : Either Type Type = Type in

Type
